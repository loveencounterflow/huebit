{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\n# GUY                       = require 'guy'\n# { alert\n#   debug\n#   help\n#   info\n#   plain\n#   praise\n#   urge\n#   warn\n#   whisper }               = GUY.trm.get_loggers 'demo-proxy'\n# { rpr\n#   inspect\n#   echo\n#   white\n#   blue\n#   gold\n#   grey\n#   red\n#   bold\n#   reverse\n#   log     }               = GUY.trm\n# write                     = ( p ) -> process.stdout.write p\n# C                         = require 'ansis'\n# { nfa }                   = require '../../../apps/normalize-function-arguments'\n# GTNG                      = require '../../../apps/guy-test-NG'\n# { Test                  } = GTNG\nSFMODULES                 = require './single-file-modules'\n\n### temporary: ###\n{ f }                     = require '../../effstring'\necho = console.log\ninfo = console.log\nhelp = console.log\nwhisper = console.log\nrpr = ( x ) -> \"#{x}\"\ndebug = console.debug\n\n\n#===========================================================================================================\n{ D, } = do ->\n  { create_infinyproxy,\n    sys_symbol,           } = SFMODULES.require_infiniproxy()\n  #=========================================================================================================\n  class D\n\n    #-------------------------------------------------------------------------------------------------------\n    constructor: ( callee ) ->\n      @other_prop = 'OTHER_PROP'\n      Object.setPrototypeOf callee, @\n      R = create_infinyproxy { callee, provider: @, }\n      # ...\n      return R\n\n    #-------------------------------------------------------------------------------------------------------\n    method_of_d: ( value ) ->\n      whisper 'Ω___1', 'METHOD_OF_D'\n      whisper 'Ω___2', ( k for k of @[ sys_symbol ] ) # .sub_level_proxy\n      @[ sys_symbol ].stack.push 'generated'\n      @[ sys_symbol ].stack.push 'stuff'\n      @[ sys_symbol ].stack.push \"value:#{rpr value}\"\n      return @[ sys_symbol ].sub_level_proxy\n\n    #-------------------------------------------------------------------------------------------------------\n    property_of_d: 'PROPERTY_OF_D'\n\n  #---------------------------------------------------------------------------------------------------------\n  return exports = { D, }\n\n#.........................................................................................................\ndo =>\n  my_fn_3 = ( P... ) ->\n    whisper 'Ω___3', @stack, @stack.is_empty, [ @stack..., ]\n    chain   = [ @stack..., ].join '.'\n    content = ( ( rpr p ) for p in P )\n    return \"[#{chain}:#{content}]\"\n  echo '——————————————————————————————————————————————————————————————————————————————'\n  help 'Ω___4', rpr d = new D my_fn_3\n  # help 'Ω___5', reverse GUY.trm.truth ( d instanceof D )   # true\n  help 'Ω___6', rpr Object.getPrototypeOf d\n  help 'Ω___7', rpr ( typeof Object.getPrototypeOf d ) is ( typeof ( -> ) )\n  help 'Ω___8', rpr typeof d\n  help 'Ω___9', rpr Object::toString.call d\n  help 'Ω__10', rpr d instanceof Function\n  echo '——————————————————————————————————————————————————————————————————————————————'\n  info 'Ω__11', rpr d.other_prop     # OTHER_PROP\n  info 'Ω__12', rpr d.method_of_d()  # METHOD_OF_D\n  info 'Ω__13', rpr d.property_of_d  # PROPERTY_OF_D\n  info 'Ω__14', rpr d.unknown_key    # something else: 'unknown_key'\n  echo '——————————————————————————————————————————————————————————————————————————————'\n  info 'Ω__15', rpr d 1, 2, 'c'\n  info 'Ω__16', rpr d.red\n  info 'Ω__17', rpr d 1, 2, 'c'\n  info 'Ω__18', rpr d.red.bold 1, 2, 'c'\n  info 'Ω__19', rpr d.red.bold.method_of_d(123).hola 'ftw'\n  info 'Ω__20', rpr d.red.bold.method_of_d'123'.hola 'ftw'\n\n\n#===========================================================================================================\nSFMODULES.require_ansi = ->\n\n  #=========================================================================================================\n  ANSI = new class Ansi\n    ###\n\n    * as for the background ('bg'), only colors and no effects can be set; in addition, the bg color can be\n      set to its default (or 'transparent'), which will show the terminal's or the terminal emulator's\n      configured bg color\n    * as for the foreground ('fg'), colors and effects such as blinking, bold, italic, underline, overline,\n      strike can be set; in addition, the configured terminal default font color can be set, and each effect\n      has a dedicated off-switch\n    * neat tables can be drawn by combining the overline effect with `│` U+2502 'Box Drawing Light Vertical\n      Line'; the renmarkable feature of this is that it minimizes spacing around characters meaning it's\n      possible to have adjacent rows of cells separated from the next row by a border without having to\n      sacrifice a line of text just to draw the border.\n    * while the two color palattes implied by the standard XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n      * better to only use full RGB than to fuzz around with palettes\n      * apps that use colors at all should be prepared for dark and bright backgrounds\n      * in general better to set fg, bg colors than to use reverse\n      * but reverse actually does do what it says—it swaps fg with bg color\n\n    \\x1b[39m default fg color\n    \\x1b[49m default bg color\n\n    ###\n    #-------------------------------------------------------------------------------------------------------\n    fg_color_code_from_rgb_dec: ([ r, g, b, ]) -> \"\\x1b[38:2::#{r}:#{g}:#{b}m\"\n    bg_color_code_from_rgb_dec: ([ r, g, b, ]) -> \"\\x1b[48:2::#{r}:#{g}:#{b}m\"\n    fg_color_code_from_hex:     ( hex        ) -> @fg_color_code_from_rgb_dec @rgb_from_hex hex\n    bg_color_code_from_hex:     ( hex        ) -> @bg_color_code_from_rgb_dec @rgb_from_hex hex\n    fg_color_code_from_color_name: ( name ) ->\n      rgb = @colors[ name ] ? @colors.fallback\n      return @fg_color_code_from_rgb_dec rgb\n    rgb_from_hex: ( hex ) ->\n      ### TAINT use proper typing ###\n      throw new Error \"Ω__25 expected text, got #{rpr hex}\" unless ( typeof hex ) is 'string'\n      throw new Error \"Ω__25 expected '#', got #{rpr hex}\" unless hex.startsWith '#'\n      throw new Error \"Ω__25 expected text of length 7, got #{rpr hex}\" unless hex.length is 7\n      [ r16, g16, b16, ] = [ hex[ 1 .. 2 ], hex[ 3 .. 4 ], hex[ 5 .. 6 ], ]\n      return [ ( parseInt r16, 16 ), ( parseInt g16, 16 ), ( parseInt b16, 16 ), ]\n\n  #---------------------------------------------------------------------------------------------------------\n  return exports = { ANSI, }\n\n#===========================================================================================================\ndemo_colorful_proxy = ->\n  class TMP_error extends Error\n  { create_infinyproxy,\n    sys_symbol,           } = SFMODULES.require_infiniproxy()\n  { ANSI,                 } = SFMODULES.require_ansi()\n  #-------------------------------------------------------------------------------------------------------\n  colors_ansi = null\n  colors =\n    ### thx to: https://en.wikipedia.org/wiki/Help:Distinguishable_colors ###\n    ### thx to: https://graphicdesign.stackexchange.com/questions/3682/where-can-i-find-a-large-palette-set-of-contrasting-colors-for-coloring-many-d ###\n    black:            '#000000'\n    white:            '#ffffff'\n    amethyst:         '#f0a3ff'\n    blue:             '#0075dc'\n    caramel:          '#993f00'\n    damson:           '#4c005c'\n    ebony:            '#191919'\n    forest:           '#005c31'\n    green:            '#2bce48'\n    lime:             '#9dcc00'\n    quagmire:         '#426600'\n    honeydew:         '#ffcc99'\n    iron:             '#808080'\n    jade:             '#94ffb5'\n    khaki:            '#8f7c00'\n    mallow:           '#c20088'\n    navy:             '#003380'\n    orpiment:         '#ffa405'\n    pink:             '#ffa8bb'\n    red:              '#ff0010'\n    sky:              '#5ef1f2'\n    turquoise:        '#00998f'\n    violet:           '#740aff'\n    wine:             '#990000'\n    uranium:          '#e0ff66'\n    xanthin:          '#ffff80'\n    yellow:           '#ffe100'\n    zinnia:           '#ff5005'\n    #.....................................................................................................\n    fallback:         [ 255,  20, 147, ]\n\n  for name, code of colors\n    switch true\n      when ( typeof code ) is 'string'\n        rgb = ANSI.rgb_from_hex code\n      when Array.isArray code\n        rgb = code\n      else throw new Error \"Ω__25 format error: #{rpr code}\"\n    fg_code_start = ANSI.fg_color_code_from_rgb_dec rgb\n    bg_code_start = ANSI.bg_color_code_from_rgb_dec rgb\n    if name is 'black'\n      fg_black = fg_code_start\n    echo 'Ω__10', f\"abc▄#{fg_code_start} DEF▄ \\x1b[0mxyz▄ #{fg_black}#{bg_code_start} DEF▄ \\x1b[0mxyz▄ —— #{name}:<20c; ——\"\n\n  color_zones = ( require './color-zones' ).color_zones\n  fgz         = '\\x1b[39m'\n  bgz         = '\\x1b[49m'\n  for zone_name_1, zone_colors_1 of color_zones\n    echo()\n    for color_name_1, hex_1 of zone_colors_1\n      R     = f\"#{zone_name_1}:<6c; #{color_name_1}:<10c; #{hex_1} \"\n      fga1  = ANSI.fg_color_code_from_hex hex_1\n      for zone_name_2, zone_colors_2 of color_zones\n        R += ' '\n        for color_name_2, hex_2 of zone_colors_2\n          bga2  = ANSI.bg_color_code_from_hex hex_2\n          R    += \"#{fga1}#{bga2} W #{fgz}#{bgz}\"\n      echo R\n      # echo rpr R\n\n  fga       = '\\x1B[38:2::37:54:118m'\n  bga       = '\\x1B[48:2::255:255:255m'\n  overlinea = '\\x1b[53m'\n  overlinez = '\\x1b[55m'\n  blinka    = '\\x1b[5m'\n  blinkz    = '\\x1b[25m'\n  red       = '\\x1B[38:2::207:32:39m'\n  bgred     = '\\x1B[48:2::207:32:39m'\n  echo \"abc #{fga}#{bga}#{overlinea} DEF│gjy│1234 #{overlinez}#{fgz}#{bgz} xyz\"\n  echo \"abc #{fga}#{bga}#{overlinea} DEF#{bgred}│gjy│#{bga}1234 #{overlinez}#{fgz}#{bgz} xyz\"\n  echo \"abc #{fga}#{bga}#{overlinea} DEF│gjy│#{red}1234#{fga} #{overlinez}#{fgz}#{bgz} xyz\"\n  echo \"abc #{fga}#{bga}#{overlinea} DEF│#{blinka}gjy#{blinkz}│1234 #{overlinez}#{fgz}#{bgz} xyz\"\n  echo \"abc #{fga}#{bga}#{overlinea} DEF│gjy│1234 #{overlinez}#{fgz}#{bgz} xyz\"\n  echo()\n  echo \"\\x1B[39m\\x1B[49m\\x1B[38:2::37:54:118m\\x1B[48:2::207:32:39m abc \\x1b[7m abc \\x1b[0m\"\n  echo()\n\n  return null\n\n\n  #=========================================================================================================\n  class Colorizer\n\n    #-------------------------------------------------------------------------------------------------------\n    @colorize: ( P... ) ->\n      # whisper 'Ω__21', \"colorize() context keys:  #{rpr ( k for k of @ )}\"\n      # whisper 'Ω__22', \"colorize() arguments:     #{rpr P}\"\n      whisper 'Ω__23', \"colorize() stack:         #{rpr [ @stack..., ]}\"\n      for name from @stack\n        ansi = ANSI.fg_color_code_from_color_name name\n        # debug 'Ω__10', ( rpr name ), ( rpr ansi )\n        echo 'Ω__10', f\"abc▄#{ansi} DEF▄ \\x1b[0mxyz▄ —— #{name}:<20c; ——\"\n      return \"*******************\"\n\n    #-------------------------------------------------------------------------------------------------------\n    constructor: ->\n      @other_prop = 'OTHER_PROP'\n      Object.setPrototypeOf @constructor.colorize, @\n      R = create_infinyproxy { callee: @constructor.colorize, provider: @, }\n      return R\n\n  #=========================================================================================================\n  c = new Colorizer()\n  info 'Ω__24', c\n  info 'Ω__25', c.green.bold.inverse \" holy moly \"\n  info 'Ω__25', c.slategray \" holy moly \"\n  info 'Ω__25', c.darkslategray \" holy moly \"\n  info 'Ω__25', c.darkkhaki \" holy moly \"\n  info 'Ω__25', c.gold \" holy moly \"\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  # ( new Test guytest_cfg ).test { demo_proxy_as_html_producer, }\n  #.........................................................................................................\n  # demo_infinite_proxy()\n  # demo_instance_function_as_proxy()\n  demo_colorful_proxy()\n\n\n\n\n\n# \"Colour Zones – Explanatory diagrams, colour names, and modifying adjectives\" by Paul Green-Armytage\n\nmodule.exports =\n  color_zones:\n    light:\n      white:        '#ffffff'\n      pink:         '#e5a3b4'\n      apricot:      '#edc89a'\n      lemon:        '#f2f08f'\n      chartreuse:   '#e0e67a'\n      mint:         '#bbddae'\n      azure:        '#a1dae1'\n      mauve:        '#c5a0c9'\n    vivid:\n      grey:         '#7f7e7f'\n      red:          '#cf2027'\n      orange:       '#da7828'\n      yellow:       '#ecda42'\n      lime:         '#a4c23b'\n      green:        '#77c258'\n      turquoise:    '#54958b'\n      blue:         '#486eb6'\n    deep:\n      black:        '#000000'\n      maroon:       '#7c1214'\n      brown:        '#83421b'\n      khaki:        '#86792f'\n      olive:        '#4c642e'\n      forest:       '#315a2b'\n      teal:         '#305a55'\n      navy:         '#253676'\n\n\n\n\n"
  ]
}